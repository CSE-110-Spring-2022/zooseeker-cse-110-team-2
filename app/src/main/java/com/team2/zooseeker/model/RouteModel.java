package com.team2.zooseeker.model;

import android.content.Context;
import android.util.Log;

import org.jgrapht.Graph;
import org.jgrapht.GraphPath;
import org.jgrapht.alg.shortestpath.DijkstraShortestPath;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Map;

import cse110.IdentifiedWeightedEdge;
import cse110.ZooData;

public class RouteModel {
    ArrayList<String> list;
    InputStream fileIn;
    Graph<String, IdentifiedWeightedEdge> graph;
    Map<String, ZooData.VertexInfo> vertexInfo;
    Map<String, ZooData.EdgeInfo> edgeInfo;

    public RouteModel(ArrayList<String> list, InputStream fileIn) {
        this.list = new ArrayList<>(list);
        this.fileIn = fileIn;
        graph = ZooData.loadZooGraphJSON(fileIn);
    }

    public RouteModel(InputStream fileIn) {
        this.list = new ArrayList<>();
        this.fileIn = fileIn;
        graph = ZooData.loadZooGraphJSON(fileIn);
    }

    public RouteModel(Graph<String, IdentifiedWeightedEdge> graph, Map<String, ZooData.VertexInfo> vertexInfo, Map<String, ZooData.EdgeInfo> edgeInfo) {
        this.list = new ArrayList<>();
        this.fileIn = null;
        this.graph = graph;
        this.vertexInfo = vertexInfo;
        this.edgeInfo = edgeInfo;
    }

    public void setExhibits(ArrayList<String> exhibitsList) {
        this.list = exhibitsList;
    }


    public ArrayList<String> genRoute() {
        // "source" and "sink" are graph terms for the start and end
        String entrance_exit = "entrance_exit_gate";

        // 1. Load the graph...
//         graph = ZooData.loadZooGraphJSON(fileIn);

        String prev = entrance_exit;
        ArrayList<String> route = new ArrayList<>();
//        route.add(0, entrance_exit);
//        list.add(0, entrance_exit);
        route.add(entrance_exit);
//        Log.d("DEBUG ROUTE", route.toString());
        while (!list.isEmpty()) {
            String closest = "";
            int closestDist = Integer.MAX_VALUE;
            for (String next : list) {
                GraphPath<String, IdentifiedWeightedEdge> path = DijkstraShortestPath.findPathBetween(graph, prev, next);
                int pathDist = path.getLength();

                //System.out.printf("From %s to %s: %d\n", prev, next, pathDist);
                if (pathDist < closestDist) {

                    closest = next;
                    closestDist = pathDist;
                }
//                Log.d("DEBUG PATH", path.toString());
            }
            list.remove(closest);
            route.add(closest);
            prev = closest;
        }
        route.add(entrance_exit);
        return route;
    }

    /**
     * Generate list of directions based on routes generated by genRoute()
     * @param route
     * @return
     */
    public ArrayList<String> getDirections(ArrayList<String> route) {
        ArrayList<String> directions = new ArrayList<>();
//        System.out.println(route);
//        Graph<String, IdentifiedWeightedEdge> g = ZooData.loadZooGraphJSON(fileIn);
        for (int i = 0; i < route.size() - 1; i++) {
            String edgeStartVertex = route.get(i);
            String edgeEndVertex = route.get(i + 1);
            getDirections(edgeStartVertex, edgeEndVertex);
        }
        return directions;
    }

    public ArrayList<String> getDirections(String start, String end) {

        ArrayList<String> directions = new ArrayList<>();
        GraphPath<String, IdentifiedWeightedEdge> path = DijkstraShortestPath.findPathBetween(graph, start, end);
        int i = 1;
        String edgeStartVertex = start;
            for (IdentifiedWeightedEdge e : path.getEdgeList()) {
                if (!vertexInfo.get(graph.getEdgeSource(e).toString()).name.equals(edgeStartVertex)) {
                    System.out.printf("  %d. Walk %.0f meters along %s from '%s' to '%s'.\n",
                        i,
                        graph.getEdgeWeight(e),
                        edgeInfo.get(e.getId()).street,
                        vertexInfo.get(graph.getEdgeSource(e).toString()).name,
                        vertexInfo.get(graph.getEdgeTarget(e).toString()).name);
                    i++;
                    edgeStartVertex = vertexInfo.get(graph.getEdgeTarget(e).toString()).name;
                } else {
                    System.out.printf("  %d. Walk %.0f meters along %s from '%s' to '%s'.\n",
                        i,
                        graph.getEdgeWeight(e),
                        edgeInfo.get(e.getId()).street,
                        vertexInfo.get(graph.getEdgeTarget(e).toString()).name,
                        vertexInfo.get(graph.getEdgeSource(e).toString()).name);
                    i++;
                    edgeStartVertex = vertexInfo.get(graph.getEdgeSource(e).toString()).name;
            }
        }
        return directions;
    }
}
